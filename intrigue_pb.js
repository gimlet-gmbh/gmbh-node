/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.intrigue.Action', null, global);
goog.exportSymbol('proto.intrigue.CoreService', null, global);
goog.exportSymbol('proto.intrigue.DataRequest', null, global);
goog.exportSymbol('proto.intrigue.DataResponse', null, global);
goog.exportSymbol('proto.intrigue.EmptyRequest', null, global);
goog.exportSymbol('proto.intrigue.NewService', null, global);
goog.exportSymbol('proto.intrigue.NewServiceRequest', null, global);
goog.exportSymbol('proto.intrigue.Payload', null, global);
goog.exportSymbol('proto.intrigue.Ping', null, global);
goog.exportSymbol('proto.intrigue.Pong', null, global);
goog.exportSymbol('proto.intrigue.ProcessManager', null, global);
goog.exportSymbol('proto.intrigue.Receipt', null, global);
goog.exportSymbol('proto.intrigue.Request', null, global);
goog.exportSymbol('proto.intrigue.Responder', null, global);
goog.exportSymbol('proto.intrigue.Service', null, global);
goog.exportSymbol('proto.intrigue.ServiceSummary', null, global);
goog.exportSymbol('proto.intrigue.ServiceUpdate', null, global);
goog.exportSymbol('proto.intrigue.SummaryReceipt', null, global);
goog.exportSymbol('proto.intrigue.Transport', null, global);
goog.exportSymbol('proto.intrigue.WhoIsRequest', null, global);
goog.exportSymbol('proto.intrigue.WhoIsResponse', null, global);
goog.exportSymbol('proto.intrigue.subFields', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.NewServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.NewServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.NewServiceRequest.displayName = 'proto.intrigue.NewServiceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.NewServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.NewServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.NewServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.NewServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    service: (f = msg.getService()) && proto.intrigue.NewService.toObject(includeInstance, f),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    env: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.NewServiceRequest}
 */
proto.intrigue.NewServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.NewServiceRequest;
  return proto.intrigue.NewServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.NewServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.NewServiceRequest}
 */
proto.intrigue.NewServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.intrigue.NewService;
      reader.readMessage(value,proto.intrigue.NewService.deserializeBinaryFromReader);
      msg.setService(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.NewServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.NewServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.NewServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.NewServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getService();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.intrigue.NewService.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEnv();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional NewService Service = 1;
 * @return {?proto.intrigue.NewService}
 */
proto.intrigue.NewServiceRequest.prototype.getService = function() {
  return /** @type{?proto.intrigue.NewService} */ (
    jspb.Message.getWrapperField(this, proto.intrigue.NewService, 1));
};


/** @param {?proto.intrigue.NewService|undefined} value */
proto.intrigue.NewServiceRequest.prototype.setService = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.intrigue.NewServiceRequest.prototype.clearService = function() {
  this.setService(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.intrigue.NewServiceRequest.prototype.hasService = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Address = 2;
 * @return {string}
 */
proto.intrigue.NewServiceRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.intrigue.NewServiceRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Env = 3;
 * @return {string}
 */
proto.intrigue.NewServiceRequest.prototype.getEnv = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.NewServiceRequest.prototype.setEnv = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.Receipt.displayName = 'proto.intrigue.Receipt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.Receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceinfo: (f = msg.getServiceinfo()) && proto.intrigue.ServiceSummary.toObject(includeInstance, f),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    followup: jspb.Message.getFieldWithDefault(msg, 3, ""),
    error: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.Receipt}
 */
proto.intrigue.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.Receipt;
  return proto.intrigue.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.Receipt}
 */
proto.intrigue.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.intrigue.ServiceSummary;
      reader.readMessage(value,proto.intrigue.ServiceSummary.deserializeBinaryFromReader);
      msg.setServiceinfo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFollowup(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.intrigue.ServiceSummary.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFollowup();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional ServiceSummary serviceInfo = 1;
 * @return {?proto.intrigue.ServiceSummary}
 */
proto.intrigue.Receipt.prototype.getServiceinfo = function() {
  return /** @type{?proto.intrigue.ServiceSummary} */ (
    jspb.Message.getWrapperField(this, proto.intrigue.ServiceSummary, 1));
};


/** @param {?proto.intrigue.ServiceSummary|undefined} value */
proto.intrigue.Receipt.prototype.setServiceinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.intrigue.Receipt.prototype.clearServiceinfo = function() {
  this.setServiceinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.intrigue.Receipt.prototype.hasServiceinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.intrigue.Receipt.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.intrigue.Receipt.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Followup = 3;
 * @return {string}
 */
proto.intrigue.Receipt.prototype.getFollowup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.Receipt.prototype.setFollowup = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Error = 10;
 * @return {string}
 */
proto.intrigue.Receipt.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.intrigue.Receipt.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.DataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.DataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.DataRequest.displayName = 'proto.intrigue.DataRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.DataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.DataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.DataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.DataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.intrigue.Request.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.DataRequest}
 */
proto.intrigue.DataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.DataRequest;
  return proto.intrigue.DataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.DataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.DataRequest}
 */
proto.intrigue.DataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.intrigue.Request;
      reader.readMessage(value,proto.intrigue.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.DataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.DataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.DataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.DataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.intrigue.Request.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Request Request = 1;
 * @return {?proto.intrigue.Request}
 */
proto.intrigue.DataRequest.prototype.getRequest = function() {
  return /** @type{?proto.intrigue.Request} */ (
    jspb.Message.getWrapperField(this, proto.intrigue.Request, 1));
};


/** @param {?proto.intrigue.Request|undefined} value */
proto.intrigue.DataRequest.prototype.setRequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.intrigue.DataRequest.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.intrigue.DataRequest.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Error = 2;
 * @return {string}
 */
proto.intrigue.DataRequest.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.intrigue.DataRequest.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.DataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.DataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.DataResponse.displayName = 'proto.intrigue.DataResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.DataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.DataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.DataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.DataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responder: (f = msg.getResponder()) && proto.intrigue.Responder.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.DataResponse}
 */
proto.intrigue.DataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.DataResponse;
  return proto.intrigue.DataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.DataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.DataResponse}
 */
proto.intrigue.DataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.intrigue.Responder;
      reader.readMessage(value,proto.intrigue.Responder.deserializeBinaryFromReader);
      msg.setResponder(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.DataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.DataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.DataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.DataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponder();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.intrigue.Responder.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Responder Responder = 2;
 * @return {?proto.intrigue.Responder}
 */
proto.intrigue.DataResponse.prototype.getResponder = function() {
  return /** @type{?proto.intrigue.Responder} */ (
    jspb.Message.getWrapperField(this, proto.intrigue.Responder, 2));
};


/** @param {?proto.intrigue.Responder|undefined} value */
proto.intrigue.DataResponse.prototype.setResponder = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.intrigue.DataResponse.prototype.clearResponder = function() {
  this.setResponder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.intrigue.DataResponse.prototype.hasResponder = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string Error = 3;
 * @return {string}
 */
proto.intrigue.DataResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.DataResponse.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.WhoIsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.WhoIsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.WhoIsRequest.displayName = 'proto.intrigue.WhoIsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.WhoIsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.WhoIsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.WhoIsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.WhoIsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: jspb.Message.getFieldWithDefault(msg, 1, ""),
    target: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.WhoIsRequest}
 */
proto.intrigue.WhoIsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.WhoIsRequest;
  return proto.intrigue.WhoIsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.WhoIsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.WhoIsRequest}
 */
proto.intrigue.WhoIsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.WhoIsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.WhoIsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.WhoIsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.WhoIsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Sender = 1;
 * @return {string}
 */
proto.intrigue.WhoIsRequest.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intrigue.WhoIsRequest.prototype.setSender = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Target = 2;
 * @return {string}
 */
proto.intrigue.WhoIsRequest.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.intrigue.WhoIsRequest.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.WhoIsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.WhoIsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.WhoIsResponse.displayName = 'proto.intrigue.WhoIsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.WhoIsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.WhoIsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.WhoIsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.WhoIsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.WhoIsResponse}
 */
proto.intrigue.WhoIsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.WhoIsResponse;
  return proto.intrigue.WhoIsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.WhoIsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.WhoIsResponse}
 */
proto.intrigue.WhoIsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetaddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.WhoIsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.WhoIsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.WhoIsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.WhoIsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string TargetAddress = 1;
 * @return {string}
 */
proto.intrigue.WhoIsResponse.prototype.getTargetaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intrigue.WhoIsResponse.prototype.setTargetaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Error = 3;
 * @return {string}
 */
proto.intrigue.WhoIsResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.WhoIsResponse.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.EmptyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.EmptyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.EmptyRequest.displayName = 'proto.intrigue.EmptyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.EmptyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.EmptyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.EmptyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.EmptyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.EmptyRequest}
 */
proto.intrigue.EmptyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.EmptyRequest;
  return proto.intrigue.EmptyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.EmptyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.EmptyRequest}
 */
proto.intrigue.EmptyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.EmptyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.EmptyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.EmptyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.EmptyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.ServiceUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.ServiceUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.ServiceUpdate.displayName = 'proto.intrigue.ServiceUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.ServiceUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.ServiceUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.ServiceUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.ServiceUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    address: jspb.Message.getFieldWithDefault(msg, 4, ""),
    env: jspb.Message.getFieldWithDefault(msg, 5, ""),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.ServiceUpdate}
 */
proto.intrigue.ServiceUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.ServiceUpdate;
  return proto.intrigue.ServiceUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.ServiceUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.ServiceUpdate}
 */
proto.intrigue.ServiceUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequest(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnv(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.ServiceUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.ServiceUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.ServiceUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.ServiceUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEnv();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string Request = 1;
 * @return {string}
 */
proto.intrigue.ServiceUpdate.prototype.getRequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intrigue.ServiceUpdate.prototype.setRequest = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.intrigue.ServiceUpdate.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.intrigue.ServiceUpdate.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Address = 4;
 * @return {string}
 */
proto.intrigue.ServiceUpdate.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.intrigue.ServiceUpdate.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Env = 5;
 * @return {string}
 */
proto.intrigue.ServiceUpdate.prototype.getEnv = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.intrigue.ServiceUpdate.prototype.setEnv = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string Error = 3;
 * @return {string}
 */
proto.intrigue.ServiceUpdate.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.ServiceUpdate.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.Action.displayName = 'proto.intrigue.Action';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: jspb.Message.getFieldWithDefault(msg, 1, ""),
    target: jspb.Message.getFieldWithDefault(msg, 2, ""),
    remoteid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    message: jspb.Message.getFieldWithDefault(msg, 4, ""),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.Action}
 */
proto.intrigue.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.Action;
  return proto.intrigue.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.Action}
 */
proto.intrigue.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequest(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRemoteid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string Request = 1;
 * @return {string}
 */
proto.intrigue.Action.prototype.getRequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intrigue.Action.prototype.setRequest = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Target = 2;
 * @return {string}
 */
proto.intrigue.Action.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.intrigue.Action.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string RemoteID = 5;
 * @return {string}
 */
proto.intrigue.Action.prototype.getRemoteid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.intrigue.Action.prototype.setRemoteid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string Message = 4;
 * @return {string}
 */
proto.intrigue.Action.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.intrigue.Action.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Error = 3;
 * @return {string}
 */
proto.intrigue.Action.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.Action.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.SummaryReceipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.intrigue.SummaryReceipt.repeatedFields_, null);
};
goog.inherits(proto.intrigue.SummaryReceipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.SummaryReceipt.displayName = 'proto.intrigue.SummaryReceipt';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.intrigue.SummaryReceipt.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.SummaryReceipt.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.SummaryReceipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.SummaryReceipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.SummaryReceipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    remotesList: jspb.Message.toObjectList(msg.getRemotesList(),
    proto.intrigue.ProcessManager.toObject, includeInstance),
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    proto.intrigue.CoreService.toObject, includeInstance),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.SummaryReceipt}
 */
proto.intrigue.SummaryReceipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.SummaryReceipt;
  return proto.intrigue.SummaryReceipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.SummaryReceipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.SummaryReceipt}
 */
proto.intrigue.SummaryReceipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.intrigue.ProcessManager;
      reader.readMessage(value,proto.intrigue.ProcessManager.deserializeBinaryFromReader);
      msg.addRemotes(value);
      break;
    case 4:
      var value = new proto.intrigue.CoreService;
      reader.readMessage(value,proto.intrigue.CoreService.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.SummaryReceipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.SummaryReceipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.SummaryReceipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.SummaryReceipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.intrigue.ProcessManager.serializeBinaryToWriter
    );
  }
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.intrigue.CoreService.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated ProcessManager Remotes = 1;
 * @return {!Array<!proto.intrigue.ProcessManager>}
 */
proto.intrigue.SummaryReceipt.prototype.getRemotesList = function() {
  return /** @type{!Array<!proto.intrigue.ProcessManager>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.intrigue.ProcessManager, 1));
};


/** @param {!Array<!proto.intrigue.ProcessManager>} value */
proto.intrigue.SummaryReceipt.prototype.setRemotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.intrigue.ProcessManager=} opt_value
 * @param {number=} opt_index
 * @return {!proto.intrigue.ProcessManager}
 */
proto.intrigue.SummaryReceipt.prototype.addRemotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.intrigue.ProcessManager, opt_index);
};


proto.intrigue.SummaryReceipt.prototype.clearRemotesList = function() {
  this.setRemotesList([]);
};


/**
 * repeated CoreService Services = 4;
 * @return {!Array<!proto.intrigue.CoreService>}
 */
proto.intrigue.SummaryReceipt.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.intrigue.CoreService>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.intrigue.CoreService, 4));
};


/** @param {!Array<!proto.intrigue.CoreService>} value */
proto.intrigue.SummaryReceipt.prototype.setServicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.intrigue.CoreService=} opt_value
 * @param {number=} opt_index
 * @return {!proto.intrigue.CoreService}
 */
proto.intrigue.SummaryReceipt.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.intrigue.CoreService, opt_index);
};


proto.intrigue.SummaryReceipt.prototype.clearServicesList = function() {
  this.setServicesList([]);
};


/**
 * optional string Error = 3;
 * @return {string}
 */
proto.intrigue.SummaryReceipt.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.SummaryReceipt.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.Ping.displayName = 'proto.intrigue.Ping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: jspb.Message.getFieldWithDefault(msg, 2, ""),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.Ping}
 */
proto.intrigue.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.Ping;
  return proto.intrigue.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.Ping}
 */
proto.intrigue.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string Status = 1;
 * @return {string}
 */
proto.intrigue.Ping.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intrigue.Ping.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Time = 2;
 * @return {string}
 */
proto.intrigue.Ping.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.intrigue.Ping.prototype.setTime = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Error = 3;
 * @return {string}
 */
proto.intrigue.Ping.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.Ping.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.Pong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.Pong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.Pong.displayName = 'proto.intrigue.Pong';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.Pong.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.Pong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.Pong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Pong.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    time: jspb.Message.getFieldWithDefault(msg, 2, ""),
    error: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.Pong}
 */
proto.intrigue.Pong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.Pong;
  return proto.intrigue.Pong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.Pong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.Pong}
 */
proto.intrigue.Pong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.Pong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.Pong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.Pong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Pong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string Status = 1;
 * @return {string}
 */
proto.intrigue.Pong.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intrigue.Pong.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Time = 2;
 * @return {string}
 */
proto.intrigue.Pong.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.intrigue.Pong.prototype.setTime = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Error = 3;
 * @return {string}
 */
proto.intrigue.Pong.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.Pong.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.ProcessManager = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.intrigue.ProcessManager.repeatedFields_, null);
};
goog.inherits(proto.intrigue.ProcessManager, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.ProcessManager.displayName = 'proto.intrigue.ProcessManager';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.intrigue.ProcessManager.repeatedFields_ = [8,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.ProcessManager.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.ProcessManager.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.ProcessManager} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.ProcessManager.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    address: jspb.Message.getFieldWithDefault(msg, 3, ""),
    starttime: jspb.Message.getFieldWithDefault(msg, 5, ""),
    errorsList: jspb.Message.getRepeatedField(msg, 8),
    status: jspb.Message.getFieldWithDefault(msg, 7, ""),
    logpath: jspb.Message.getFieldWithDefault(msg, 9, ""),
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    proto.intrigue.Service.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.ProcessManager}
 */
proto.intrigue.ProcessManager.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.ProcessManager;
  return proto.intrigue.ProcessManager.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.ProcessManager} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.ProcessManager}
 */
proto.intrigue.ProcessManager.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addErrors(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogpath(value);
      break;
    case 4:
      var value = new proto.intrigue.Service;
      reader.readMessage(value,proto.intrigue.Service.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.ProcessManager.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.ProcessManager.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.ProcessManager} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.ProcessManager.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLogpath();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.intrigue.Service.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ID = 1;
 * @return {string}
 */
proto.intrigue.ProcessManager.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intrigue.ProcessManager.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.intrigue.ProcessManager.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.intrigue.ProcessManager.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Address = 3;
 * @return {string}
 */
proto.intrigue.ProcessManager.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.ProcessManager.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string StartTime = 5;
 * @return {string}
 */
proto.intrigue.ProcessManager.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.intrigue.ProcessManager.prototype.setStarttime = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string Errors = 8;
 * @return {!Array<string>}
 */
proto.intrigue.ProcessManager.prototype.getErrorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.intrigue.ProcessManager.prototype.setErrorsList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.intrigue.ProcessManager.prototype.addErrors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.intrigue.ProcessManager.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};


/**
 * optional string Status = 7;
 * @return {string}
 */
proto.intrigue.ProcessManager.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.intrigue.ProcessManager.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string LogPath = 9;
 * @return {string}
 */
proto.intrigue.ProcessManager.prototype.getLogpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.intrigue.ProcessManager.prototype.setLogpath = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * repeated Service Services = 4;
 * @return {!Array<!proto.intrigue.Service>}
 */
proto.intrigue.ProcessManager.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.intrigue.Service>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.intrigue.Service, 4));
};


/** @param {!Array<!proto.intrigue.Service>} value */
proto.intrigue.ProcessManager.prototype.setServicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.intrigue.Service=} opt_value
 * @param {number=} opt_index
 * @return {!proto.intrigue.Service}
 */
proto.intrigue.ProcessManager.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.intrigue.Service, opt_index);
};


proto.intrigue.ProcessManager.prototype.clearServicesList = function() {
  this.setServicesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.NewService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.intrigue.NewService.repeatedFields_, null);
};
goog.inherits(proto.intrigue.NewService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.NewService.displayName = 'proto.intrigue.NewService';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.intrigue.NewService.repeatedFields_ = [2,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.NewService.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.NewService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.NewService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.NewService.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    aliasesList: jspb.Message.getRepeatedField(msg, 2),
    isserver: jspb.Message.getFieldWithDefault(msg, 3, false),
    isclient: jspb.Message.getFieldWithDefault(msg, 4, false),
    peergroupsList: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.NewService}
 */
proto.intrigue.NewService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.NewService;
  return proto.intrigue.NewService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.NewService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.NewService}
 */
proto.intrigue.NewService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAliases(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsserver(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsclient(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addPeergroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.NewService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.NewService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.NewService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.NewService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAliasesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getIsserver();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIsclient();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPeergroupsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.intrigue.NewService.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intrigue.NewService.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string Aliases = 2;
 * @return {!Array<string>}
 */
proto.intrigue.NewService.prototype.getAliasesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.intrigue.NewService.prototype.setAliasesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.intrigue.NewService.prototype.addAliases = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.intrigue.NewService.prototype.clearAliasesList = function() {
  this.setAliasesList([]);
};


/**
 * optional bool IsServer = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.intrigue.NewService.prototype.getIsserver = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.intrigue.NewService.prototype.setIsserver = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool IsClient = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.intrigue.NewService.prototype.getIsclient = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.intrigue.NewService.prototype.setIsclient = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated string PeerGroups = 6;
 * @return {!Array<string>}
 */
proto.intrigue.NewService.prototype.getPeergroupsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.intrigue.NewService.prototype.setPeergroupsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.intrigue.NewService.prototype.addPeergroups = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.intrigue.NewService.prototype.clearPeergroupsList = function() {
  this.setPeergroupsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.ServiceSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.ServiceSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.ServiceSummary.displayName = 'proto.intrigue.ServiceSummary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.ServiceSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.ServiceSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.ServiceSummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.ServiceSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fingerprint: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.ServiceSummary}
 */
proto.intrigue.ServiceSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.ServiceSummary;
  return proto.intrigue.ServiceSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.ServiceSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.ServiceSummary}
 */
proto.intrigue.ServiceSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFingerprint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.ServiceSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.ServiceSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.ServiceSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.ServiceSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFingerprint();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string Address = 1;
 * @return {string}
 */
proto.intrigue.ServiceSummary.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intrigue.ServiceSummary.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ID = 2;
 * @return {string}
 */
proto.intrigue.ServiceSummary.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.intrigue.ServiceSummary.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Fingerprint = 3;
 * @return {string}
 */
proto.intrigue.ServiceSummary.prototype.getFingerprint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.ServiceSummary.prototype.setFingerprint = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.Service = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.intrigue.Service.repeatedFields_, null);
};
goog.inherits(proto.intrigue.Service, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.Service.displayName = 'proto.intrigue.Service';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.intrigue.Service.repeatedFields_ = [19];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.Service.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.Service.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.Service} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Service.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 10, ""),
    name: jspb.Message.getFieldWithDefault(msg, 11, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 23, ""),
    address: jspb.Message.getFieldWithDefault(msg, 21, ""),
    path: jspb.Message.getFieldWithDefault(msg, 12, ""),
    logpath: jspb.Message.getFieldWithDefault(msg, 20, ""),
    status: jspb.Message.getFieldWithDefault(msg, 14, ""),
    restarts: jspb.Message.getFieldWithDefault(msg, 15, 0),
    fails: jspb.Message.getFieldWithDefault(msg, 24, 0),
    pid: jspb.Message.getFieldWithDefault(msg, 16, 0),
    starttime: jspb.Message.getFieldWithDefault(msg, 17, ""),
    failtime: jspb.Message.getFieldWithDefault(msg, 18, ""),
    language: jspb.Message.getFieldWithDefault(msg, 25, ""),
    errorsList: jspb.Message.getRepeatedField(msg, 19)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.Service}
 */
proto.intrigue.Service.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.Service;
  return proto.intrigue.Service.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.Service} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.Service}
 */
proto.intrigue.Service.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setMode(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogpath(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRestarts(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFails(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPid(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setFailtime(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.Service.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.Service.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.Service} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Service.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getMode();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getLogpath();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getRestarts();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getFails();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getFailtime();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      19,
      f
    );
  }
};


/**
 * optional string Id = 10;
 * @return {string}
 */
proto.intrigue.Service.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.intrigue.Service.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string Name = 11;
 * @return {string}
 */
proto.intrigue.Service.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.intrigue.Service.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string Mode = 23;
 * @return {string}
 */
proto.intrigue.Service.prototype.getMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/** @param {string} value */
proto.intrigue.Service.prototype.setMode = function(value) {
  jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional string Address = 21;
 * @return {string}
 */
proto.intrigue.Service.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.intrigue.Service.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string Path = 12;
 * @return {string}
 */
proto.intrigue.Service.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.intrigue.Service.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string LogPath = 20;
 * @return {string}
 */
proto.intrigue.Service.prototype.getLogpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.intrigue.Service.prototype.setLogpath = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string Status = 14;
 * @return {string}
 */
proto.intrigue.Service.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.intrigue.Service.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional int32 Restarts = 15;
 * @return {number}
 */
proto.intrigue.Service.prototype.getRestarts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.intrigue.Service.prototype.setRestarts = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 Fails = 24;
 * @return {number}
 */
proto.intrigue.Service.prototype.getFails = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.intrigue.Service.prototype.setFails = function(value) {
  jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional int32 Pid = 16;
 * @return {number}
 */
proto.intrigue.Service.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.intrigue.Service.prototype.setPid = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string StartTime = 17;
 * @return {string}
 */
proto.intrigue.Service.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.intrigue.Service.prototype.setStarttime = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string FailTime = 18;
 * @return {string}
 */
proto.intrigue.Service.prototype.getFailtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.intrigue.Service.prototype.setFailtime = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string Language = 25;
 * @return {string}
 */
proto.intrigue.Service.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/** @param {string} value */
proto.intrigue.Service.prototype.setLanguage = function(value) {
  jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * repeated string Errors = 19;
 * @return {!Array<string>}
 */
proto.intrigue.Service.prototype.getErrorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 19));
};


/** @param {!Array<string>} value */
proto.intrigue.Service.prototype.setErrorsList = function(value) {
  jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.intrigue.Service.prototype.addErrors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


proto.intrigue.Service.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.CoreService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.intrigue.CoreService.repeatedFields_, null);
};
goog.inherits(proto.intrigue.CoreService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.CoreService.displayName = 'proto.intrigue.CoreService';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.intrigue.CoreService.repeatedFields_ = [7,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.CoreService.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.CoreService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.CoreService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.CoreService.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    peergroupsList: jspb.Message.getRepeatedField(msg, 7),
    parentid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    errorsList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.CoreService}
 */
proto.intrigue.CoreService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.CoreService;
  return proto.intrigue.CoreService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.CoreService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.CoreService}
 */
proto.intrigue.CoreService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addPeergroups(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addErrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.CoreService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.CoreService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.CoreService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.CoreService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPeergroupsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getParentid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.intrigue.CoreService.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intrigue.CoreService.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Address = 2;
 * @return {string}
 */
proto.intrigue.CoreService.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.intrigue.CoreService.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Mode = 3;
 * @return {string}
 */
proto.intrigue.CoreService.prototype.getMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.CoreService.prototype.setMode = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string PeerGroups = 7;
 * @return {!Array<string>}
 */
proto.intrigue.CoreService.prototype.getPeergroupsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.intrigue.CoreService.prototype.setPeergroupsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.intrigue.CoreService.prototype.addPeergroups = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.intrigue.CoreService.prototype.clearPeergroupsList = function() {
  this.setPeergroupsList([]);
};


/**
 * optional string ParentID = 5;
 * @return {string}
 */
proto.intrigue.CoreService.prototype.getParentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.intrigue.CoreService.prototype.setParentid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string Errors = 4;
 * @return {!Array<string>}
 */
proto.intrigue.CoreService.prototype.getErrorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.intrigue.CoreService.prototype.setErrorsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.intrigue.CoreService.prototype.addErrors = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.intrigue.CoreService.prototype.clearErrorsList = function() {
  this.setErrorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.Request.displayName = 'proto.intrigue.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: jspb.Message.getFieldWithDefault(msg, 1, ""),
    target: jspb.Message.getFieldWithDefault(msg, 2, ""),
    method: jspb.Message.getFieldWithDefault(msg, 3, ""),
    data1: jspb.Message.getFieldWithDefault(msg, 50, ""),
    tport: (f = msg.getTport()) && proto.intrigue.Transport.toObject(includeInstance, f),
    pload: (f = msg.getPload()) && proto.intrigue.Payload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.Request}
 */
proto.intrigue.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.Request;
  return proto.intrigue.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.Request}
 */
proto.intrigue.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setData1(value);
      break;
    case 55:
      var value = new proto.intrigue.Transport;
      reader.readMessage(value,proto.intrigue.Transport.deserializeBinaryFromReader);
      msg.setTport(value);
      break;
    case 60:
      var value = new proto.intrigue.Payload;
      reader.readMessage(value,proto.intrigue.Payload.deserializeBinaryFromReader);
      msg.setPload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getData1();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
  f = message.getTport();
  if (f != null) {
    writer.writeMessage(
      55,
      f,
      proto.intrigue.Transport.serializeBinaryToWriter
    );
  }
  f = message.getPload();
  if (f != null) {
    writer.writeMessage(
      60,
      f,
      proto.intrigue.Payload.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Sender = 1;
 * @return {string}
 */
proto.intrigue.Request.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intrigue.Request.prototype.setSender = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Target = 2;
 * @return {string}
 */
proto.intrigue.Request.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.intrigue.Request.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Method = 3;
 * @return {string}
 */
proto.intrigue.Request.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.Request.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Data1 = 50;
 * @return {string}
 */
proto.intrigue.Request.prototype.getData1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/** @param {string} value */
proto.intrigue.Request.prototype.setData1 = function(value) {
  jspb.Message.setProto3StringField(this, 50, value);
};


/**
 * optional Transport Tport = 55;
 * @return {?proto.intrigue.Transport}
 */
proto.intrigue.Request.prototype.getTport = function() {
  return /** @type{?proto.intrigue.Transport} */ (
    jspb.Message.getWrapperField(this, proto.intrigue.Transport, 55));
};


/** @param {?proto.intrigue.Transport|undefined} value */
proto.intrigue.Request.prototype.setTport = function(value) {
  jspb.Message.setWrapperField(this, 55, value);
};


proto.intrigue.Request.prototype.clearTport = function() {
  this.setTport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.intrigue.Request.prototype.hasTport = function() {
  return jspb.Message.getField(this, 55) != null;
};


/**
 * optional Payload Pload = 60;
 * @return {?proto.intrigue.Payload}
 */
proto.intrigue.Request.prototype.getPload = function() {
  return /** @type{?proto.intrigue.Payload} */ (
    jspb.Message.getWrapperField(this, proto.intrigue.Payload, 60));
};


/** @param {?proto.intrigue.Payload|undefined} value */
proto.intrigue.Request.prototype.setPload = function(value) {
  jspb.Message.setWrapperField(this, 60, value);
};


proto.intrigue.Request.prototype.clearPload = function() {
  this.setPload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.intrigue.Request.prototype.hasPload = function() {
  return jspb.Message.getField(this, 60) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.Responder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.Responder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.Responder.displayName = 'proto.intrigue.Responder';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.Responder.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.Responder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.Responder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Responder.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 50, ""),
    errorstring: jspb.Message.getFieldWithDefault(msg, 98, ""),
    haderror: jspb.Message.getFieldWithDefault(msg, 99, false),
    tport: (f = msg.getTport()) && proto.intrigue.Transport.toObject(includeInstance, f),
    pload: (f = msg.getPload()) && proto.intrigue.Payload.toObject(includeInstance, f),
    err: jspb.Message.getFieldWithDefault(msg, 65, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.Responder}
 */
proto.intrigue.Responder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.Responder;
  return proto.intrigue.Responder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.Responder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.Responder}
 */
proto.intrigue.Responder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 50:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 98:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorstring(value);
      break;
    case 99:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHaderror(value);
      break;
    case 55:
      var value = new proto.intrigue.Transport;
      reader.readMessage(value,proto.intrigue.Transport.deserializeBinaryFromReader);
      msg.setTport(value);
      break;
    case 60:
      var value = new proto.intrigue.Payload;
      reader.readMessage(value,proto.intrigue.Payload.deserializeBinaryFromReader);
      msg.setPload(value);
      break;
    case 65:
      var value = /** @type {string} */ (reader.readString());
      msg.setErr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.Responder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.Responder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.Responder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Responder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      50,
      f
    );
  }
  f = message.getErrorstring();
  if (f.length > 0) {
    writer.writeString(
      98,
      f
    );
  }
  f = message.getHaderror();
  if (f) {
    writer.writeBool(
      99,
      f
    );
  }
  f = message.getTport();
  if (f != null) {
    writer.writeMessage(
      55,
      f,
      proto.intrigue.Transport.serializeBinaryToWriter
    );
  }
  f = message.getPload();
  if (f != null) {
    writer.writeMessage(
      60,
      f,
      proto.intrigue.Payload.serializeBinaryToWriter
    );
  }
  f = message.getErr();
  if (f.length > 0) {
    writer.writeString(
      65,
      f
    );
  }
};


/**
 * optional string Result = 50;
 * @return {string}
 */
proto.intrigue.Responder.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/** @param {string} value */
proto.intrigue.Responder.prototype.setResult = function(value) {
  jspb.Message.setProto3StringField(this, 50, value);
};


/**
 * optional string ErrorString = 98;
 * @return {string}
 */
proto.intrigue.Responder.prototype.getErrorstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 98, ""));
};


/** @param {string} value */
proto.intrigue.Responder.prototype.setErrorstring = function(value) {
  jspb.Message.setProto3StringField(this, 98, value);
};


/**
 * optional bool HadError = 99;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.intrigue.Responder.prototype.getHaderror = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 99, false));
};


/** @param {boolean} value */
proto.intrigue.Responder.prototype.setHaderror = function(value) {
  jspb.Message.setProto3BooleanField(this, 99, value);
};


/**
 * optional Transport Tport = 55;
 * @return {?proto.intrigue.Transport}
 */
proto.intrigue.Responder.prototype.getTport = function() {
  return /** @type{?proto.intrigue.Transport} */ (
    jspb.Message.getWrapperField(this, proto.intrigue.Transport, 55));
};


/** @param {?proto.intrigue.Transport|undefined} value */
proto.intrigue.Responder.prototype.setTport = function(value) {
  jspb.Message.setWrapperField(this, 55, value);
};


proto.intrigue.Responder.prototype.clearTport = function() {
  this.setTport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.intrigue.Responder.prototype.hasTport = function() {
  return jspb.Message.getField(this, 55) != null;
};


/**
 * optional Payload Pload = 60;
 * @return {?proto.intrigue.Payload}
 */
proto.intrigue.Responder.prototype.getPload = function() {
  return /** @type{?proto.intrigue.Payload} */ (
    jspb.Message.getWrapperField(this, proto.intrigue.Payload, 60));
};


/** @param {?proto.intrigue.Payload|undefined} value */
proto.intrigue.Responder.prototype.setPload = function(value) {
  jspb.Message.setWrapperField(this, 60, value);
};


proto.intrigue.Responder.prototype.clearPload = function() {
  this.setPload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.intrigue.Responder.prototype.hasPload = function() {
  return jspb.Message.getField(this, 60) != null;
};


/**
 * optional string Err = 65;
 * @return {string}
 */
proto.intrigue.Responder.prototype.getErr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 65, ""));
};


/** @param {string} value */
proto.intrigue.Responder.prototype.setErr = function(value) {
  jspb.Message.setProto3StringField(this, 65, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.Transport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.Transport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.Transport.displayName = 'proto.intrigue.Transport';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.Transport.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.Transport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.Transport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Transport.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: jspb.Message.getFieldWithDefault(msg, 1, ""),
    target: jspb.Message.getFieldWithDefault(msg, 2, ""),
    method: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.Transport}
 */
proto.intrigue.Transport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.Transport;
  return proto.intrigue.Transport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.Transport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.Transport}
 */
proto.intrigue.Transport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.Transport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.Transport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.Transport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Transport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string Sender = 1;
 * @return {string}
 */
proto.intrigue.Transport.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intrigue.Transport.prototype.setSender = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Target = 2;
 * @return {string}
 */
proto.intrigue.Transport.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.intrigue.Transport.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Method = 3;
 * @return {string}
 */
proto.intrigue.Transport.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.intrigue.Transport.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intrigue.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.Payload.displayName = 'proto.intrigue.Payload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsMap: (f = msg.getFieldsMap()) ? f.toObject(includeInstance, proto.intrigue.subFields.toObject) : [],
    jsonMap: (f = msg.getJsonMap()) ? f.toObject(includeInstance, undefined) : [],
    textfieldsMap: (f = msg.getTextfieldsMap()) ? f.toObject(includeInstance, undefined) : [],
    boolfieldsMap: (f = msg.getBoolfieldsMap()) ? f.toObject(includeInstance, undefined) : [],
    bytefieldsMap: (f = msg.getBytefieldsMap()) ? f.toObject(includeInstance, undefined) : [],
    intfieldsMap: (f = msg.getIntfieldsMap()) ? f.toObject(includeInstance, undefined) : [],
    int64fieldsMap: (f = msg.getInt64fieldsMap()) ? f.toObject(includeInstance, undefined) : [],
    uintfieldsMap: (f = msg.getUintfieldsMap()) ? f.toObject(includeInstance, undefined) : [],
    uint64fieldsMap: (f = msg.getUint64fieldsMap()) ? f.toObject(includeInstance, undefined) : [],
    doublefieldsMap: (f = msg.getDoublefieldsMap()) ? f.toObject(includeInstance, undefined) : [],
    floatfieldsMap: (f = msg.getFloatfieldsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.Payload}
 */
proto.intrigue.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.Payload;
  return proto.intrigue.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.Payload}
 */
proto.intrigue.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 50:
      var value = msg.getFieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.intrigue.subFields.deserializeBinaryFromReader, "");
         });
      break;
    case 55:
      var value = msg.getJsonMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "");
         });
      break;
    case 60:
      var value = msg.getTextfieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 62:
      var value = msg.getBoolfieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "");
         });
      break;
    case 64:
      var value = msg.getBytefieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "");
         });
      break;
    case 66:
      var value = msg.getIntfieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32, null, "");
         });
      break;
    case 68:
      var value = msg.getInt64fieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "");
         });
      break;
    case 70:
      var value = msg.getUintfieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "");
         });
      break;
    case 72:
      var value = msg.getUint64fieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint64, null, "");
         });
      break;
    case 74:
      var value = msg.getDoublefieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readDouble, null, "");
         });
      break;
    case 76:
      var value = msg.getFloatfieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readFloat, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(50, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.intrigue.subFields.serializeBinaryToWriter);
  }
  f = message.getJsonMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(55, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getTextfieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(60, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getBoolfieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(62, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getBytefieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(64, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getIntfieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(66, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = message.getInt64fieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(68, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getUintfieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(70, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getUint64fieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(72, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getDoublefieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(74, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeDouble);
  }
  f = message.getFloatfieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(76, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeFloat);
  }
};


/**
 * map<string, subFields> Fields = 50;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.intrigue.subFields>}
 */
proto.intrigue.Payload.prototype.getFieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.intrigue.subFields>} */ (
      jspb.Message.getMapField(this, 50, opt_noLazyCreate,
      proto.intrigue.subFields));
};


proto.intrigue.Payload.prototype.clearFieldsMap = function() {
  this.getFieldsMap().clear();
};


/**
 * map<string, bytes> JSON = 55;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.intrigue.Payload.prototype.getJsonMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 55, opt_noLazyCreate,
      null));
};


proto.intrigue.Payload.prototype.clearJsonMap = function() {
  this.getJsonMap().clear();
};


/**
 * map<string, string> TextFields = 60;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.intrigue.Payload.prototype.getTextfieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 60, opt_noLazyCreate,
      null));
};


proto.intrigue.Payload.prototype.clearTextfieldsMap = function() {
  this.getTextfieldsMap().clear();
};


/**
 * map<string, bool> BoolFields = 62;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.intrigue.Payload.prototype.getBoolfieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 62, opt_noLazyCreate,
      null));
};


proto.intrigue.Payload.prototype.clearBoolfieldsMap = function() {
  this.getBoolfieldsMap().clear();
};


/**
 * map<string, bytes> ByteFields = 64;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.intrigue.Payload.prototype.getBytefieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 64, opt_noLazyCreate,
      null));
};


proto.intrigue.Payload.prototype.clearBytefieldsMap = function() {
  this.getBytefieldsMap().clear();
};


/**
 * map<string, int32> IntFields = 66;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.intrigue.Payload.prototype.getIntfieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 66, opt_noLazyCreate,
      null));
};


proto.intrigue.Payload.prototype.clearIntfieldsMap = function() {
  this.getIntfieldsMap().clear();
};


/**
 * map<string, int64> Int64Fields = 68;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.intrigue.Payload.prototype.getInt64fieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 68, opt_noLazyCreate,
      null));
};


proto.intrigue.Payload.prototype.clearInt64fieldsMap = function() {
  this.getInt64fieldsMap().clear();
};


/**
 * map<string, uint32> UintFields = 70;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.intrigue.Payload.prototype.getUintfieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 70, opt_noLazyCreate,
      null));
};


proto.intrigue.Payload.prototype.clearUintfieldsMap = function() {
  this.getUintfieldsMap().clear();
};


/**
 * map<string, uint64> Uint64Fields = 72;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.intrigue.Payload.prototype.getUint64fieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 72, opt_noLazyCreate,
      null));
};


proto.intrigue.Payload.prototype.clearUint64fieldsMap = function() {
  this.getUint64fieldsMap().clear();
};


/**
 * map<string, double> DoubleFields = 74;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.intrigue.Payload.prototype.getDoublefieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 74, opt_noLazyCreate,
      null));
};


proto.intrigue.Payload.prototype.clearDoublefieldsMap = function() {
  this.getDoublefieldsMap().clear();
};


/**
 * map<string, float> FloatFields = 76;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.intrigue.Payload.prototype.getFloatfieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 76, opt_noLazyCreate,
      null));
};


proto.intrigue.Payload.prototype.clearFloatfieldsMap = function() {
  this.getFloatfieldsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intrigue.subFields = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.intrigue.subFields.repeatedFields_, null);
};
goog.inherits(proto.intrigue.subFields, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intrigue.subFields.displayName = 'proto.intrigue.subFields';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.intrigue.subFields.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intrigue.subFields.prototype.toObject = function(opt_includeInstance) {
  return proto.intrigue.subFields.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intrigue.subFields} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.subFields.toObject = function(includeInstance, msg) {
  var f, obj = {
    subList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intrigue.subFields}
 */
proto.intrigue.subFields.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intrigue.subFields;
  return proto.intrigue.subFields.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intrigue.subFields} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intrigue.subFields}
 */
proto.intrigue.subFields.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSub(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intrigue.subFields.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intrigue.subFields.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intrigue.subFields} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intrigue.subFields.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string Sub = 1;
 * @return {!Array<string>}
 */
proto.intrigue.subFields.prototype.getSubList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.intrigue.subFields.prototype.setSubList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.intrigue.subFields.prototype.addSub = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.intrigue.subFields.prototype.clearSubList = function() {
  this.setSubList([]);
};


goog.object.extend(exports, proto.intrigue);
